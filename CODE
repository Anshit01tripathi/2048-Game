// Personalized 2048 Game Implementation in C
#include <stdio.h> 
#include <stdlib.h> 
#include <time.h> 

#define BOARD_SIZE 4
#define MAX_RANDOM_VALUE 3 
#define MAX_HISTORY 500 

// Game State Variables
int board[BOARD_SIZE][BOARD_SIZE] = { 0 }, 
    buffer[BOARD_SIZE], 
    temp_flag = 0, 
    score = 0, 
    high_score = 0, 
    step_count = 0, 
    input_choice = 0;

// Utility Functions
int get_num_length(int num); 
void display_board(); 
void shift_values(int index); 
void generate_random_tile(); 
void update_board(); 
void save_current_state(int*** history); 
void restore_previous_state(int*** history); 
void reset_game();

int main() 
{ 
    // Game Initialization
    int i, j;
    char user_input;
    int*** history; 
    
    // Initialize the history matrix
    history = (int***)malloc(sizeof(int*) * (MAX_HISTORY + 1)); 
    for (i = 0; i < MAX_HISTORY + 1; i++) { 
        history[i] = (int**)malloc(sizeof(int*) * BOARD_SIZE); 
        for (j = 0; j < BOARD_SIZE; j++) { 
            history[i][j] = (int*)malloc(sizeof(int) * BOARD_SIZE); 
        }
    }

    // Load the high score from the file (if exists)
    FILE* file_ptr; 
    file_ptr = fopen("high_score.txt", "r"); 
    if (file_ptr) {
        fscanf(file_ptr, "%d", &high_score); 
        fclose(file_ptr); 
    }

    // Start Game
    reset_game(); 
    display_board();

    while (1) { 
        user_input = getchar(); 
        // Flush input buffer
        while (getchar() != '\n');

        if (user_input == 'D' || user_input == 'd') {
            step_count++; 
            save_current_state(history); 
            for (i = 0; i < BOARD_SIZE; i++) {
                for (j = 0; j < BOARD_SIZE; j++) { 
                    buffer[j] = board[i][j]; 
                }
                update_board();
                for (j = 0; j < BOARD_SIZE; j++) { 
                    board[i][j] = buffer[j]; 
                }
            }
        } else if (user_input == 'A' || user_input == 'a') {
            step_count++; 
            save_current_state(history); 
            for (i = 0; i < BOARD_SIZE; i++) {
                for (j = BOARD_SIZE - 1; j >= 0; j--) {
                    buffer[BOARD_SIZE - 1 - j] = board[i][j];
                }
                update_board();
                for (j = 0; j < BOARD_SIZE; j++) {
                    board[i][BOARD_SIZE - 1 - j] = buffer[j];
                }
            }
        } else if (user_input == 'S' || user_input == 's') {
            step_count++; 
            save_current_state(history); 
            for (i = 0; i < BOARD_SIZE; i++) {
                for (j = 0; j < BOARD_SIZE; j++) {
                    buffer[j] = board[j][i];
                }
                update_board();
                for (j = 0; j < BOARD_SIZE; j++) {
                    board[j][i] = buffer[j];
                }
            }
        } else if (user_input == 'W' || user_input == 'w') {
            step_count++; 
            save_current_state(history); 
            for (i = 0; i < BOARD_SIZE; i++) {
                for (j = BOARD_SIZE - 1; j >= 0; j--) {
                    buffer[BOARD_SIZE - 1 - j] = board[j][i];
                }
                update_board();
                for (j = 0; j < BOARD_SIZE; j++) {
                    board[BOARD_SIZE - 1 - j][i] = buffer[j];
                }
            }
        } else if (user_input == 'P' || user_input == 'p') {
            restore_previous_state(history);
            temp_flag = 1;
        } else if (user_input == 'R' || user_input == 'r') {
            reset_game();
            display_board();
            continue;
        } else if (user_input == 'U' || user_input == 'u') {
            exit(0);
        }

        // Display board after valid input
        if (temp_flag == 1 || temp_flag == 8) {
            temp_flag = 0;
            display_board();
        } else {
            generate_random_tile(); 
            display_board();
        }
    }
    
    return 0;
}

// Function to determine the length of a number (number of digits)
int get_num_length(int num) { 
    int length = 0;
    do {
        length++;
        num /= 10;
    } while (num != 0);
    return length;
}

// Function to display the current game board
void display_board() { 
    system("clear || cls"); // Clears the console screen
    printf("\n============= 2048 Game =============\n");
    printf("Score: %d\tHigh Score: %d\n", score, high_score);
    
    // Print the board
    for (int i = 0; i < BOARD_SIZE; i++) {
        printf("|");
        for (int j = 0; j < BOARD_SIZE; j++) {
            if (board[i][j] != 0) {
                int len = get_num_length(board[i][j]);
                printf("%*d |", 4 - len, board[i][j]);
            } else {
                printf("    |");
            }
        }
        printf("\n");
    }

    printf("\nControls: W (up), A (left), S (down), D (right)\n");
    printf("P (undo), R (restart), U (exit)\n");
}

// Function to shift and merge values in a row or column
void update_board() {
    for (int i = BOARD_SIZE - 1; i > 0; i--) {
        if (buffer[i] == buffer[i - 1]) {
            buffer[i] += buffer[i - 1];
            score += buffer[i];
            buffer[i - 1] = 0;
            temp_flag = 1;
        } else if (buffer[i - 1] == 0 && buffer[i] != 0) {
            buffer[i - 1] = buffer[i];
            buffer[i] = 0;
            temp_flag = 1;
        }
    }
    shift_values(0);
}

// Function to shift values to fill gaps in rows or columns
void shift_values(int index) {
    for (int i = index; i < BOARD_SIZE; i++) {
        if (buffer[i] == 0) continue;
        for (int j = i; j > index; j--) {
            if (buffer[j - 1] == 0) {
                buffer[j - 1] = buffer[j];
                buffer[j] = 0;
            }
        }
    }
}

// Function to generate a random tile in an empty cell
void generate_random_tile() {
    srand(time(NULL));
    int i, j;
    do {
        i = rand() % BOARD_SIZE;
        j = rand() % BOARD_SIZE;
    } while (board[i][j] != 0);
    board[i][j] = (rand() % 10 == 0) ? 4 : 2;
}

// Function to save the current state of the board to the history
void save_current_state(int*** history) {
    if (step_count == MAX_HISTORY + 1) {
        for (int i = MAX_HISTORY; i > 0; i--) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                for (int k = 0; k < BOARD_SIZE; k++) {
                    history[i][j][k] = history[i - 1][j][k];
                }
            }
        }
        step_count = MAX_HISTORY;
    }
    for (int i = 0; i < BOARD_SIZE; i++) {
        for (int j = 0; j < BOARD_SIZE; j++) {
            history[MAX_HISTORY - step_count][i][j] = board[i][j];
        }
    }
}

// Function to restore the previous state of the board from history
void restore_previous_state(int*** history) {
    if (step_count == 0) {
        printf("No previous states available!\n");
        return;
    }
    for (int i = 0; i < BOARD_SIZE; i++) {
        for (int j = 0; j < BOARD_SIZE; j++) {
            board[i][j] = history[MAX_HISTORY - step_count][i][j];
        }
    }
    step_count--;
}

// Function to reset the game board
void reset_game() {
    for (int i = 0; i < BOARD_SIZE; i++) {
        for (int j = 0; j < BOARD_SIZE; j++) {
            board[i][j] = 0;
        }
    }
    score = 0;
    generate_random_tile();
    generate_random_tile();
}
